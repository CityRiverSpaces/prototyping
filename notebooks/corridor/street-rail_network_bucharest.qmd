---
title: "Street and rail network"
format: html
---

```{r}
#| label: setup
#| message: false

library("dplyr")
library("leaflet")
library("lwgeom")
library("osmdata")
library("purrr")
library("sf")
library("sfnetworks")
library("tidygraph")
```

```{r}
city_name <- "Bucharest"
epsg_code <- 32635  # UTM zone 35N
```

```{r}
# bounding box
bbox <- getbb(city_name) |> as.vector()
names(bbox) <- c("xmin", "ymin", "xmax", "ymax")
bbox <- st_bbox(bbox, crs = st_crs(4326))
```

A couple of utility functions:

```{r}
# bbox to gemetry
bbox_to_sfc <- function(bbox, crs = NULL){
    sfc <- bbox |> st_as_sfc()
    if(is.null(crs)) sfc else st_transform(sfc, crs = crs)
}

# query the Overpass API for a key:value pair within a given bounding box
osmdata_as_sf <- function(key, value, bb){
    bb |>
        opq() |>
        add_osm_feature(key = key, value = value) |>
        osmdata_sf()
}

# get geometry in lat/lon (WGS84)
getGeomLatLon <- function(x) st_transform(x, 4326) |> st_geometry()

# extract nodes and edges from the network
getNodes <- function(net) net |> activate("nodes") |> st_geometry()
getEdges <- function(net) net |> activate("edges") |> st_geometry()
```

```{r}
highways_value <- c("motorway", "primary", "secondary", "tertiary")
highways <- osmdata_as_sf("highway", highways_value, bbox)
railways <- osmdata_as_sf("railway", "rail", bbox)
```

```{r}
# cast polygons (mostly roundabouts) into lines
poly_to_lines <- highways$osm_polygons |>
    st_cast("LINESTRING")
highways_lines <- highways$osm_lines |>
    bind_rows(poly_to_lines)

railways_lines <- railways$osm_lines
```

```{r}
highways_lines <- highways_lines |> mutate(type = highways_lines[["highway"]])
railways_lines <- railways_lines |> mutate(type = railways_lines[["railway"]])
```

```{r}
# create network, only keeping "type" column
net <- bind_rows(highways_lines, railways_lines)  |>
    select("type") |>
    as_sfnetwork(directed = FALSE) |>
    st_transform(epsg_code)
```

```{r}
# Determine crossings between edges
crossing_edges <- net |> activate("edges") |> filter(edge_crosses(.E())) |> st_geometry()
crossings <- st_intersection(crossing_edges)
points <- crossings[st_is(crossings, "POINT")]
```

```{r}
net_blend <- st_network_blend(net, points)
```

```{r}
# Simplify the graph removing loops and double-edge connections
# https://luukvdmeer.github.io/sfnetworks/articles/sfn02_preprocess_clean.html#simplify-network
simplify <- function(net){
    net|>
        activate("edges") |>
        # reorder the edges so that the shortest is kept
        arrange(edge_length()) |>
        filter(!edge_is_multiple(), ) |>
        filter(!edge_is_loop())
}


clean <- function(net){
    net |>
        # subdivide edges by adding missing nodes
        # https://luukvdmeer.github.io/sfnetworks/articles/sfn02_preprocess_clean.html#subdivide-edges
        convert(to_spatial_subdivision, .clean = TRUE) |>
        # remove pseudo-nodes
        # https://luukvdmeer.github.io/sfnetworks/articles/sfn02_preprocess_clean.html#smooth-pseudo-nodes
        convert(to_spatial_smooth, .clean = TRUE) |>
        simplify() |>
        # keep only the main connected component of the network
        activate("nodes") |> filter(group_components() == 1)
}

net_clean <- clean(net_blend)
```

```{r}
# compare network before/after cleaning
leaflet() |>
    addTiles() |>
    addPolylines(data = getEdges(net) |> getGeomLatLon(), color = "red") |>
    addPolylines(data = getEdges(net_clean) |> getGeomLatLon(), color = "black")
```

```{r}
# save the street network
edges <- net_blend |> st_as_sf("edges")
nodes <- net_blend |> st_as_sf("nodes")

st_write(edges, dsn = sprintf("data/generated/network_edges_%s.gpkg", city_name), append = FALSE)
st_write(nodes, dsn = sprintf("data/generated/network_nodes_%s.gpkg", city_name), append = FALSE)
```

```{r}
edges_ <- st_read(sprintf("data/generated/network_edges_%s.gpkg", city_name))
nodes_ <- st_read(sprintf("data/generated/network_nodes_%s.gpkg", city_name))
tmp <- sfnetwork(nodes_, edges_, directed = FALSE)
```