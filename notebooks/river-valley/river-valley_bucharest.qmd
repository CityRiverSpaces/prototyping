---
title: "River valley delineation"
format: html
---

```{r}
library("ggplot2")
library("sf")
library("terra")
library("leaflet")
```

# River valley delineation for Bucharest waterways

Load input files: raster DEM and multilinestrings representing the waterway:

```{r}
dem <- rast("data/DEM_Bucharest_expanded.tif")
river_geoms <- st_read("data/generated/waterway_Dâmbovița.gpkg")
river <- river_geoms[1,]  # select waterbody extent
```

Filter DEM with a low-pass filter. This is applied to smoothen the DEM and remove the effect of the residual building elevations in the DTM as much as possible. The median of the moving window is taken to replace the center pixel.

```{r}
dem_filtered <- focal(dem, w=7, fun="median")
```
```{r}
plot(dem_filtered)
```

Reproject both the DEM and the waterway to a projected CRS (in m):

```{r}
utm_crs <- 'epsg:32635'
dem_repr <- project(dem_filtered, utm_crs, method = "near")
river_repr <- st_transform(river, crs = utm_crs)
```

Compute the slope and convert it to percentage:

```{r}
slope_rad <- terrain(dem_repr, v = "slope", unit = "radians")
slope <- tan(slope_rad)  #  radians -> percentage
```

```{r}
plot(slope)
```

Set the slope to zero for the pixels overlapping the waterway. These values will be used as "targets" in the calculation of the cost distance:

```{r}
slope_masked <- mask(
    slope,
    ifel(slope <= 1.e-3, NA, 1),
    updatevalue = 1.e-3
)
slope_masked <- mask(
    slope_masked,
    river_repr,
    inverse = TRUE,
    updatevalue = 0,
    touches = TRUE
)
```

Use the `costDist` function from `terra` to compute the cost distance from the target cells (cells with value equal to zero):

```{r}
cd <- costDist(slope_masked, target = 0)
names(cd) <- "cost_distance"
plot(cd)
```

Load the valley edge used in the previous study and reproject it:

```{r}
# st_layers("data/CRiSp-data-bucharest.gpkg")  # display layen names
valley <- st_read("data/CRiSp-data-bucharest.gpkg", layer = "URC-D_valleyedge_mod")
valley_repr <- st_transform(valley, crs = utm_crs)
```

We use the method from [this paper](https://doi.org/10.5194/hess-2020-361) in order to set the threshold on the accumulated cost distance raster to define the valley. We first define a buffer region around the river (in the article they used the wetlands geometries) and use this geometry to crop the raster:

```{r}
BUFFER_REGION <- 2000  # m
river_buffer <- st_buffer(river_repr, BUFFER_REGION)
cd_masked <- mask(
    cd,
    river_buffer,
    updatevalue = NA,
    touches = TRUE
)
```

We then calculate the mean over the cropped region:

```{r}
cd_mean <- mean(values(cd_masked), na.rm=TRUE)
cd_mean
```

We visualize the mean together with the distribution of accumulated distances:

```{r}
cd_masked_df <- as.data.frame(cd_masked, xy=TRUE)  # convert raster to df

ggplot() +
    geom_histogram(data = cd_masked_df, aes(cost_distance), bins = 60) +
    geom_vline(aes(xintercept = cd_mean), col = "red") +
    coord_fixed(0.001)

# ggsave("data/generated/tmp.png", width = 5, height = 2)
```

The mean value is used as a threshold to define the extend of the river valley:

```{r}
mask_valley <- (cd < cd_mean)
plot(mask_valley)
```

We vectorize the mask to obtain the valley polygon:

```{r}
# # Crop to the middle to get rid of the edges
# extent_to_extract <- ext(c(419750, 436050, 4909820, 4932500))
# mask_valley <- crop(mask_valley, extent_to_extract)
# plot(mask_valley)
```

```{r}
valley_polygon <- as.polygons(mask_valley, dissolve=TRUE) |>
    st_as_sf()
```

Visualize:

```{r}
leaflet() |>
    addTiles() |>
    # addRasterImage(mask_valley, opacity = 0.6) |>
    addPolygons(data = river_buffer |> st_geometry() |> st_transform(4326), color = "blue") |>
    addPolygons(data = valley_polygon[2,] |> st_transform(4326), color = "green") |>
    addPolylines(data = valley |> st_geometry() |> st_transform(4326), weight = 2) |>
    addPolylines(data = river_repr |> st_geometry() |> st_transform(4326), color= "black")

```